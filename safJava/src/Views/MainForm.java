package Views;

import Business.*;
import java.sql.SQLException;
import java.sql.Date;
import javax.swing.JList;
import javax.swing.JOptionPane;


// @author efapro01.23 Roberto Carvalho

public class MainForm extends javax.swing.JFrame 
{
    
    // ::::::::::::::::::::
    // Global Variables
    // ::::::::::::::::::::
    
    ProgramController programController;
    Deceased deceased;
    Family family;
    Service service;
    
    // ::::::::::::::::::::
    // Constructor / initComponents / InitialSetUp
    // ::::::::::::::::::::
    
    public MainForm() throws SQLException 
    { 
        System.out.println("-------------------");
        System.out.println("Inicial Setup Start");
        // Initialize
        initComponents(); 
        
        /* 
        *  Initial Setup for: 
        *  - Generic Swing Form Settings
        *  - Add Registry.Deceased
        *  - Add Registry.Family
        *  - Add Registry.Service
        *  - Search 
        */
        
        ////////////////
        //  Generic  //
        ////////////////
        /* Center Screen      */ setLocationRelativeTo(null);
        /* Program Controller */ programController = new ProgramController();
        
        //////////////////
        // Add Deceased //
        //////////////////
        /* Fill Table          */ selectAllDeceased();
        
        //////////////////
        //  Add Family  //
        //////////////////
        /* Fill Table          */ selectAllFamily();
        
        //////////////////
        // Add Service //
        //////////////////
        /* Fill Table          */ selectAllService();
        /* DatePicker Set Time */ dtpServiceUpdate.setDate(new Date(System.currentTimeMillis()));
        /* DatePicker Set Time */ dtpServiceAdd.setDate(new Date(System.currentTimeMillis()));
        
        //////////////////
        //    Search    //
        //////////////////
        /* Fill Table          */ selectAllSearch();
        /* DatePicker Set Time */ dtpServiceDateFilter.setDate(new Date(System.currentTimeMillis()));
        /* Fill Table list     */ selectAllSearchFamily();  
        /* Fill Table list     */ selectAllSearchDeceased();
        
        System.out.println("-------------------");
        
    }
    
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // Generated Code
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnServiceServiceShowAll = new javax.swing.JButton();
        btnServiceServiceFilter = new javax.swing.JButton();
        dtpServiceDateFilter = new com.toedter.calendar.JDateChooser();
        chkServicePayedFilter = new javax.swing.JCheckBox();
        chkServiceIdFilter = new javax.swing.JCheckBox();
        chkServiceDateFilter = new javax.swing.JCheckBox();
        rdServicePayNo = new javax.swing.JRadioButton();
        rdServicePayYes = new javax.swing.JRadioButton();
        txtServiceServiceFilterByID = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        panelSearch = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        dgvSearch = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtServiceDeceasedFilterByName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btnServiceDeceasedFilterByName = new javax.swing.JButton();
        txtServiceDeceasedFilterById = new javax.swing.JTextField();
        btnServiceDeceasedFilterById = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dgvSearchDeceased = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtServiceFamilyFilterByName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnServiceFamilyFilterByName = new javax.swing.JButton();
        txtServiceFamilyFilterById = new javax.swing.JTextField();
        btnServiceFamilyFilterById = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dgvSearchFamily = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        dgvDeceased = new javax.swing.JTable();
        txtDeceasedAddName = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        txtDeceasedAddAge = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txtDeceasedAddComment = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        rdDeceasedAddSexM = new javax.swing.JRadioButton();
        rdDeceasedAddSexF = new javax.swing.JRadioButton();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        txtDeceasedUpdateName = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        txtDeceasedUpdateAge = new javax.swing.JTextField();
        rdDeceasedUpdateSexM = new javax.swing.JRadioButton();
        rdDeceasedUpdateSexF = new javax.swing.JRadioButton();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        txtDeceasedUpdateComment = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        btnDeceasedAdd = new javax.swing.JButton();
        btnDeceasedUpdate = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        txtDeceasedUpdateId = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txtDeceasedRemoveId = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        btnDeceasedShowAll = new javax.swing.JButton();
        btnDeceaseRemove = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        dgvFamily = new javax.swing.JTable();
        txtFamilyAddName = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        txtFamilyAddContact = new javax.swing.JTextField();
        Address = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        btnFamilyAdd = new javax.swing.JButton();
        btnFamilyUpdate = new javax.swing.JButton();
        jLabel63 = new javax.swing.JLabel();
        txtFamilyUpdateId = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        txtFamilyRemoveId = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        btnFamilyShowAll = new javax.swing.JButton();
        btnFamilyRemove = new javax.swing.JButton();
        txtFamilyAddRelation = new javax.swing.JTextField();
        txtFamilyAddAddress = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        txtFamilyUpdateName = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        txtFamilyUpdateContact = new javax.swing.JTextField();
        txtFamilyUpdateAddress = new javax.swing.JTextField();
        jLabel80 = new javax.swing.JLabel();
        txtFamilyUpdateRelation = new javax.swing.JTextField();
        Address1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        dgvService = new javax.swing.JTable();
        txtServiceAddComment = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        btnServiceAdd = new javax.swing.JButton();
        btnServiceUpdate = new javax.swing.JButton();
        jLabel77 = new javax.swing.JLabel();
        txtServiceRemoveId = new javax.swing.JTextField();
        jLabel78 = new javax.swing.JLabel();
        btnServiceShowAll = new javax.swing.JButton();
        btnServiceRemove = new javax.swing.JButton();
        txtServiceAddFamilyId = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        txtServiceAddDeceasedId = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        txtServiceAddPrice = new javax.swing.JTextField();
        chkServiceAddPayed = new javax.swing.JCheckBox();
        dtpServiceAdd = new com.toedter.calendar.JDateChooser();
        jLabel83 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        txtServiceUpdateComment = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        txtServiceUpdateFamilyId = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        txtServiceUpdateDeceasedId = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        dtpServiceUpdate = new com.toedter.calendar.JDateChooser();
        jLabel86 = new javax.swing.JLabel();
        txtServiceUpdatePrice = new javax.swing.JTextField();
        chkServiceUpdatePayed = new javax.swing.JCheckBox();
        jLabel72 = new javax.swing.JLabel();
        txtServiceUpdateId = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        menu_AboutSaf = new javax.swing.JMenuItem();
        menu_Exit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("For Services");
        jPanel6.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        btnServiceServiceShowAll.setText("Show All");
        btnServiceServiceShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceServiceShowAllActionPerformed(evt);
            }
        });
        jPanel6.add(btnServiceServiceShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 190, 110));

        btnServiceServiceFilter.setText("Filter");
        btnServiceServiceFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceServiceFilterActionPerformed(evt);
            }
        });
        jPanel6.add(btnServiceServiceFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 190, -1));

        dtpServiceDateFilter.setToolTipText("");
        dtpServiceDateFilter.setDateFormatString("dd MM yyyy");
        dtpServiceDateFilter.setMaxSelectableDate(new java.util.Date(253370768485000L));
        jPanel6.add(dtpServiceDateFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 130, -1));

        chkServicePayedFilter.setText("Payed");
        jPanel6.add(chkServicePayedFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        chkServiceIdFilter.setText("ID");
        jPanel6.add(chkServiceIdFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        chkServiceDateFilter.setText("Date");
        jPanel6.add(chkServiceDateFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        rdServicePayNo.setSelected(true);
        rdServicePayNo.setText("No");
        rdServicePayNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdServicePayNoActionPerformed(evt);
            }
        });
        jPanel6.add(rdServicePayNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, -1, -1));

        rdServicePayYes.setText("Yes");
        rdServicePayYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdServicePayYesActionPerformed(evt);
            }
        });
        jPanel6.add(rdServicePayYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, -1, -1));
        jPanel6.add(txtServiceServiceFilterByID, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 50, -1));
        jPanel6.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 190, 10));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 210, 330));

        panelSearch.setLayout(new java.awt.BorderLayout());

        dgvSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "FamilyId", "DeceasedId", "Comment", "Date", "Price", "CheckPay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dgvSearch.setName(""); // NOI18N
        jScrollPane10.setViewportView(dgvSearch);

        panelSearch.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        jPanel1.add(panelSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 1090, 420));

        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel13.setText("For Deceased");
        jPanel13.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jLabel14.setText("By ID");
        jPanel13.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        txtServiceDeceasedFilterByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtServiceDeceasedFilterByNameKeyPressed(evt);
            }
        });
        jPanel13.add(txtServiceDeceasedFilterByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 100, -1));

        jLabel15.setText("By Name");
        jPanel13.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        btnServiceDeceasedFilterByName.setText("Filter");
        btnServiceDeceasedFilterByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceDeceasedFilterByNameActionPerformed(evt);
            }
        });
        jPanel13.add(btnServiceDeceasedFilterByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 60, -1));
        jPanel13.add(txtServiceDeceasedFilterById, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 50, -1));

        btnServiceDeceasedFilterById.setText("Filter");
        btnServiceDeceasedFilterById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceDeceasedFilterByIdActionPerformed(evt);
            }
        });
        jPanel13.add(btnServiceDeceasedFilterById, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 60, -1));

        dgvSearchDeceased.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Id", "Name"
            }
        ));
        dgvSearchDeceased.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dgvSearchDeceasedMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dgvSearchDeceased);

        jPanel13.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 230, 220));

        jPanel1.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 250, 330));

        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel16.setText("For Relatives");
        jPanel14.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jLabel17.setText("By ID");
        jPanel14.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        txtServiceFamilyFilterByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtServiceFamilyFilterByNameKeyPressed(evt);
            }
        });
        jPanel14.add(txtServiceFamilyFilterByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 100, -1));

        jLabel18.setText("By Name");
        jPanel14.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        btnServiceFamilyFilterByName.setText("Filter");
        btnServiceFamilyFilterByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceFamilyFilterByNameActionPerformed(evt);
            }
        });
        jPanel14.add(btnServiceFamilyFilterByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 60, -1));
        jPanel14.add(txtServiceFamilyFilterById, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 50, -1));

        btnServiceFamilyFilterById.setText("Filter");
        btnServiceFamilyFilterById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceFamilyFilterByIdActionPerformed(evt);
            }
        });
        jPanel14.add(btnServiceFamilyFilterById, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 60, -1));

        dgvSearchFamily.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Id", "Name"
            }
        ));
        dgvSearchFamily.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dgvSearchFamilyMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dgvSearchFamily);

        jPanel14.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 230, 220));

        jPanel1.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 250, 330));

        jTabbedPane.addTab("Search", jPanel1);

        jPanel2.setPreferredSize(new java.awt.Dimension(500, 500));

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(0, 0));

        jPanel3.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel8.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel8.setPreferredSize(new java.awt.Dimension(500, 500));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dgvDeceased.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Age", "Sex", "Comment", "Photo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dgvDeceased.setName(""); // NOI18N
        jScrollPane6.setViewportView(dgvDeceased);
        if (dgvDeceased.getColumnModel().getColumnCount() > 0) {
            dgvDeceased.getColumnModel().getColumn(0).setHeaderValue("Id");
            dgvDeceased.getColumnModel().getColumn(1).setHeaderValue("Name");
            dgvDeceased.getColumnModel().getColumn(2).setHeaderValue("Age");
            dgvDeceased.getColumnModel().getColumn(3).setHeaderValue("Sex");
            dgvDeceased.getColumnModel().getColumn(4).setHeaderValue("Comment");
            dgvDeceased.getColumnModel().getColumn(5).setHeaderValue("Photo");
        }

        jPanel8.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 620, 620));
        jPanel8.add(txtDeceasedAddName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 204, -1));

        jLabel40.setText("Name");
        jPanel8.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        jLabel41.setText("Age");
        jPanel8.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));
        jPanel8.add(txtDeceasedAddAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 40, 23));

        jLabel42.setText("Sex");
        jPanel8.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        jLabel43.setText("Comment");
        jPanel8.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));
        jPanel8.add(txtDeceasedAddComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 204, -1));

        jLabel44.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel44.setText("Add");
        jPanel8.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        rdDeceasedAddSexM.setSelected(true);
        rdDeceasedAddSexM.setText("M");
        rdDeceasedAddSexM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDeceasedAddSexMActionPerformed(evt);
            }
        });
        jPanel8.add(rdDeceasedAddSexM, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, -1));

        rdDeceasedAddSexF.setText("F");
        rdDeceasedAddSexF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDeceasedAddSexFActionPerformed(evt);
            }
        });
        jPanel8.add(rdDeceasedAddSexF, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, -1, -1));

        jLabel45.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel45.setText("Update");
        jPanel8.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        jLabel46.setText("Name");
        jPanel8.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));
        jPanel8.add(txtDeceasedUpdateName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 204, -1));

        jLabel47.setText("Age");
        jPanel8.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));
        jPanel8.add(txtDeceasedUpdateAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, 40, 23));

        rdDeceasedUpdateSexM.setSelected(true);
        rdDeceasedUpdateSexM.setText("M");
        rdDeceasedUpdateSexM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDeceasedUpdateSexMActionPerformed(evt);
            }
        });
        jPanel8.add(rdDeceasedUpdateSexM, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, -1, -1));

        rdDeceasedUpdateSexF.setText("F");
        rdDeceasedUpdateSexF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDeceasedUpdateSexFActionPerformed(evt);
            }
        });
        jPanel8.add(rdDeceasedUpdateSexF, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 380, -1, -1));

        jLabel48.setText("Sex");
        jPanel8.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, -1, -1));

        jLabel49.setText("Comment");
        jPanel8.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
        jPanel8.add(txtDeceasedUpdateComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 204, -1));
        jPanel8.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 234, 310, -1));
        jPanel8.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 519, 330, -1));

        btnDeceasedAdd.setText("Add");
        btnDeceasedAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeceasedAddActionPerformed(evt);
            }
        });
        jPanel8.add(btnDeceasedAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, -1, -1));

        btnDeceasedUpdate.setText("Update");
        btnDeceasedUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeceasedUpdateActionPerformed(evt);
            }
        });
        jPanel8.add(btnDeceasedUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, -1, -1));

        jLabel50.setText("Id");
        jPanel8.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));
        jPanel8.add(txtDeceasedUpdateId, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 40, -1));

        jLabel51.setText("Id");
        jPanel8.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 570, -1, -1));
        jPanel8.add(txtDeceasedRemoveId, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 570, 50, -1));

        jLabel52.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel52.setText("Remove");
        jPanel8.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 534, -1, -1));

        btnDeceasedShowAll.setText("Show All");
        btnDeceasedShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeceasedShowAllActionPerformed(evt);
            }
        });
        jPanel8.add(btnDeceasedShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        btnDeceaseRemove.setText("Remove");
        btnDeceaseRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeceaseRemoveActionPerformed(evt);
            }
        });
        jPanel8.add(btnDeceaseRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 570, -1, -1));

        jPanel3.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 790));

        jTabbedPane2.addTab("Deceased", jPanel3);

        jPanel4.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dgvFamily.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Contact", "Address", "Relation", "Photo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dgvFamily.setName(""); // NOI18N
        jScrollPane7.setViewportView(dgvFamily);

        jPanel9.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 620, 590));
        jPanel9.add(txtFamilyAddName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 244, -1));

        jLabel53.setText("Name");
        jPanel9.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel54.setText("Contact");
        jPanel9.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));
        jPanel9.add(txtFamilyAddContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 244, 23));

        Address.setText("Address");
        jPanel9.add(Address, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jLabel56.setText("Relation");
        jPanel9.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel57.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel57.setText("Add");
        jPanel9.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel58.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel58.setText("Update");
        jPanel9.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));
        jPanel9.add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 223, 299, -1));
        jPanel9.add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 483, 330, -1));

        btnFamilyAdd.setText("Add");
        btnFamilyAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFamilyAddActionPerformed(evt);
            }
        });
        jPanel9.add(btnFamilyAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, -1, -1));

        btnFamilyUpdate.setText("Update");
        btnFamilyUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFamilyUpdateActionPerformed(evt);
            }
        });
        jPanel9.add(btnFamilyUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, -1, -1));

        jLabel63.setText("Id");
        jPanel9.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 281, -1, -1));
        jPanel9.add(txtFamilyUpdateId, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 40, -1));

        jLabel64.setText("Id");
        jPanel9.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, -1, -1));
        jPanel9.add(txtFamilyRemoveId, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 540, 40, -1));

        jLabel65.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel65.setText("Remove");
        jPanel9.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, -1, -1));

        btnFamilyShowAll.setText("Show All");
        btnFamilyShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFamilyShowAllActionPerformed(evt);
            }
        });
        jPanel9.add(btnFamilyShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        btnFamilyRemove.setText("Remove");
        btnFamilyRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFamilyRemoveActionPerformed(evt);
            }
        });
        jPanel9.add(btnFamilyRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 540, -1, -1));
        jPanel9.add(txtFamilyAddRelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 244, 23));
        jPanel9.add(txtFamilyAddAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 244, 23));

        jLabel55.setText("Name");
        jPanel9.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 310, -1, -1));
        jPanel9.add(txtFamilyUpdateName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 250, -1));

        jLabel79.setText("Contact");
        jPanel9.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 339, -1, -1));
        jPanel9.add(txtFamilyUpdateContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 250, 23));
        jPanel9.add(txtFamilyUpdateAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 250, 23));

        jLabel80.setText("Relation");
        jPanel9.add(jLabel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 409, -1, -1));
        jPanel9.add(txtFamilyUpdateRelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, 250, 23));

        Address1.setText("Address");
        jPanel9.add(Address1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 374, -1, -1));

        jPanel4.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 990, 780));

        jTabbedPane2.addTab("Family", jPanel4);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dgvService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "FamilyId", "DeceasedId", "Comment", "Date", "Price", "CheckPay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dgvService.setName(""); // NOI18N
        jScrollPane8.setViewportView(dgvService);

        jPanel10.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 620, 600));
        jPanel10.add(txtServiceAddComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 204, -1));

        jLabel66.setText("Comment");
        jPanel10.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        jLabel67.setText("Family Id");
        jPanel10.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel70.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel70.setText("Add");
        jPanel10.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel71.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel71.setText("Update");
        jPanel10.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, -1, -1));
        jPanel10.add(jSeparator12, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 268, 329, 10));
        jPanel10.add(jSeparator13, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 561, 330, 20));

        btnServiceAdd.setText("Add");
        btnServiceAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceAddActionPerformed(evt);
            }
        });
        jPanel10.add(btnServiceAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, -1, -1));

        btnServiceUpdate.setText("Update");
        btnServiceUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceUpdateActionPerformed(evt);
            }
        });
        jPanel10.add(btnServiceUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 520, -1, -1));

        jLabel77.setText("Id");
        jPanel10.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 610, -1, -1));
        jPanel10.add(txtServiceRemoveId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 610, 40, -1));

        jLabel78.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel78.setText("Remove");
        jPanel10.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 580, -1, -1));

        btnServiceShowAll.setText("Show All");
        btnServiceShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceShowAllActionPerformed(evt);
            }
        });
        jPanel10.add(btnServiceShowAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        btnServiceRemove.setText("Remove");
        btnServiceRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceRemoveActionPerformed(evt);
            }
        });
        jPanel10.add(btnServiceRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 610, -1, -1));
        jPanel10.add(txtServiceAddFamilyId, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 204, -1));

        jLabel81.setText("Date");
        jPanel10.add(jLabel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));
        jPanel10.add(txtServiceAddDeceasedId, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 204, -1));

        jLabel82.setText("Price");
        jPanel10.add(jLabel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, -1, -1));
        jPanel10.add(txtServiceAddPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, 50, -1));

        chkServiceAddPayed.setText("Payed");
        jPanel10.add(chkServiceAddPayed, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, -1, -1));

        dtpServiceAdd.setToolTipText("");
        dtpServiceAdd.setDateFormatString("dd MM yyyy");
        dtpServiceAdd.setMaxSelectableDate(new java.util.Date(253370768485000L));
        jPanel10.add(dtpServiceAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 130, -1));

        jLabel83.setText("Deceased Id");
        jPanel10.add(jLabel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel68.setText("Comment");
        jPanel10.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));
        jPanel10.add(txtServiceUpdateComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, 204, -1));

        jLabel69.setText("Family Id");
        jPanel10.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));
        jPanel10.add(txtServiceUpdateFamilyId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, 204, -1));

        jLabel84.setText("Deceased Id");
        jPanel10.add(jLabel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));
        jPanel10.add(txtServiceUpdateDeceasedId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 420, 204, -1));

        jLabel85.setText("Date");
        jPanel10.add(jLabel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, -1, -1));

        dtpServiceUpdate.setDateFormatString("dd/MM/yyyy");
        jPanel10.add(dtpServiceUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, 130, -1));

        jLabel86.setText("Price");
        jPanel10.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 480, -1, -1));
        jPanel10.add(txtServiceUpdatePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 50, -1));

        chkServiceUpdatePayed.setText("Payed");
        jPanel10.add(chkServiceUpdatePayed, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 480, -1, -1));

        jLabel72.setText("Id");
        jPanel10.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, -1, -1));
        jPanel10.add(txtServiceUpdateId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 40, -1));

        jPanel5.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, -3, 990, 790));

        jTabbedPane2.addTab("Service", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Add Registry", jPanel2);

        menu.setText("Menu");

        menu_AboutSaf.setText("About Saf");
        menu_AboutSaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AboutSafActionPerformed(evt);
            }
        });
        menu.add(menu_AboutSaf);

        menu_Exit.setText("Exit");
        menu_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_ExitActionPerformed(evt);
            }
        });
        menu.add(menu_Exit);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // Methods (actions/events)
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    
    ////////////////
    //  Menu      //
    ////////////////
    
    private void menu_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menu_ExitActionPerformed

    private void menu_AboutSafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AboutSafActionPerformed
        
        // Inform User
        JOptionPane.showMessageDialog(null,
                "SAF (Serviço Assistente Funerária)"
              + "\nVersion 1.5" 
              + "\nJava Edition"
              + "\n\nCreated by Roberto Carvalho"                                     
              + "\nContact Information: robertocarvalho.dev@gmail.com"
              , "About Saf", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_menu_AboutSafActionPerformed

    // --------------------------

    ////////////////////
    //  Add Deceased  //
    ////////////////////
   
    // C R U D
    
    // Select
    private void selectAllDeceased() 
    {
        /* Forward -> Pc    */ try {  programController.deceased_SelectAll(dgvDeceased); } 
        /* Catch Errors/Log */ catch (SQLException e) { System.out.println(e.getMessage()); }
    }
    private void btnDeceasedShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeceasedShowAllActionPerformed
        selectAllDeceased();
    }//GEN-LAST:event_btnDeceasedShowAllActionPerformed
    
    // Add
    private void btnDeceasedAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeceasedAddActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj     */ deceased = new Deceased(); 
            /* Name    */ deceased.setName(txtDeceasedAddName.getText());
            /* Age     */ int age = Integer.parseInt(txtDeceasedAddAge.getText()); deceased.setAge(age);
            /* Sex     */ if (rdDeceasedAddSexM.isSelected()) { deceased.setSex('M'); } else if (rdDeceasedAddSexF.isSelected()) { deceased.setSex('F'); }
            /* Comment */ deceased.setComment(txtDeceasedAddComment.getText());
            /* Photo   */ deceased.setPhoto("None"); 
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool     */ DataIsOk = false;
            /* Console Log  */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User  */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, deceased.displayAllVariablesFor_Deceased_Add(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.deceased_Add(deceased); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */
                /* Name    */ txtDeceasedAddName.setText("");
                /* Age     */ txtDeceasedAddAge.setText("");
                /* Sex     */ rdDeceasedAddSexM.setSelected(true); rdDeceasedAddSexF.setSelected(false);
                /* Comment */ txtDeceasedAddComment.setText("");
                /* Photo   */ // Not implemented
                
                /* Refresh table */ selectAllDeceased();
                /* Refresh table */ selectAllSearch();
                /* Refresh table */ selectAllSearchDeceased();
            }
            // If user Cancels
            else { /* Do nothing */ }              
        }
        
    }//GEN-LAST:event_btnDeceasedAddActionPerformed
    
    // Update
    private void btnDeceasedUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeceasedUpdateActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj     */ deceased = new Deceased();
            /* Id      */ int Id = Integer.parseInt(txtDeceasedUpdateId.getText()); deceased.setId(Id);
            /* Name    */ deceased.setName(txtDeceasedUpdateName.getText());
            /* Age     */ int age = Integer.parseInt(txtDeceasedUpdateAge.getText()); deceased.setAge(age);
            /* Sex     */ if (rdDeceasedUpdateSexM.isSelected()) { deceased.setSex('M'); } else if (rdDeceasedUpdateSexF.isSelected()) { deceased.setSex('F'); }
            /* Comment */ deceased.setComment(txtDeceasedUpdateComment.getText());
            /* Photo   */ deceased.setPhoto("None"); 
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, deceased.displayAllVariablesFor_Deceased_Update(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.deceased_Update(deceased); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */
                /* Id      */ txtDeceasedUpdateId.setText("");
                /* Name    */ txtDeceasedUpdateName.setText("");
                /* Age     */ txtDeceasedUpdateAge.setText("");
                /* Sex     */ rdDeceasedUpdateSexM.setSelected(true); rdDeceasedUpdateSexF.setSelected(false);
                /* Comment */ txtDeceasedUpdateComment.setText("");
                /* Photo   */ // Not implemented
                
                /* Refresh table */ selectAllDeceased();
            }
            // If user Cancels
            else { /* Do nothing */ }  
        }
    }//GEN-LAST:event_btnDeceasedUpdateActionPerformed

    // Remove
    private void btnDeceaseRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeceaseRemoveActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj */ deceased = new Deceased();
            /* Id  */ int Id = Integer.parseInt(txtDeceasedRemoveId.getText()); deceased.setId(Id);
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, "Id to Remove : " + deceased.getId(), "Confirmation", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.deceased_Remove(deceased); } catch (SQLException e) { System.out.println(e.getMessage()); }
                /* Reset text fields */ txtDeceasedRemoveId.setText("");
                /* Refresh table */ selectAllDeceased();
            }
            // If user cancels
            else { }  
        }
    }//GEN-LAST:event_btnDeceaseRemoveActionPerformed

    // RADIAL BUTTON (Add) Sex M
    private void rdDeceasedAddSexMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDeceasedAddSexMActionPerformed
        rdDeceasedAddSexF.setSelected(false);
        rdDeceasedAddSexM.setSelected(true);
    }//GEN-LAST:event_rdDeceasedAddSexMActionPerformed
    
    // RADIAL BUTTON (Add) Sex F
    private void rdDeceasedAddSexFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDeceasedAddSexFActionPerformed
        rdDeceasedAddSexM.setSelected(false);
        rdDeceasedAddSexF.setSelected(true);
    }//GEN-LAST:event_rdDeceasedAddSexFActionPerformed
    
    // RADIAL BUTTON (Update) Sex M
    private void rdDeceasedUpdateSexMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDeceasedUpdateSexMActionPerformed
        rdDeceasedUpdateSexF.setSelected(false);
        rdDeceasedUpdateSexM.setSelected(true);
    }//GEN-LAST:event_rdDeceasedUpdateSexMActionPerformed
    
    // RADIAL BUTTON (Update) Sex F
    private void rdDeceasedUpdateSexFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDeceasedUpdateSexFActionPerformed
        rdDeceasedUpdateSexM.setSelected(false);
        rdDeceasedUpdateSexF.setSelected(true);
    }//GEN-LAST:event_rdDeceasedUpdateSexFActionPerformed
    
    // --------------------------
    
    ////////////////////
    //  Add Service   //
    ////////////////////
    
    // C R U D
    
    // Select 
    private void selectAllService() 
    {
        /* Forward -> Pc    */ try {  programController.service_SelectAll(dgvService); } 
        /* Catch Errors/Log */ catch (SQLException e) { System.out.println(e.getMessage()); }
    } 
    private void btnServiceShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceShowAllActionPerformed
        selectAllService();
    }//GEN-LAST:event_btnServiceShowAllActionPerformed
    
    // Add
    private void btnServiceAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceAddActionPerformed
            
        /* Data format verification bool */ boolean dataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {   
            // Capture data
            /* Obj        */ service = new Service(); 
            /* FamilyId   */ int fmId = Integer.parseInt(txtServiceAddFamilyId.getText()); service.setFamilyID(fmId);
            /* DeceasedId */ int dcId = Integer.parseInt(txtServiceAddDeceasedId.getText()); service.setDeceasedID(dcId);
            /* Comment    */ service.setComment(txtServiceAddComment.getText());         
            /* Date       */ Date selectedDate = new Date(dtpServiceAdd.getDate().getTime()); service.setDate(selectedDate); 
            /* Price      */ double price = Double.parseDouble(txtServiceAddPrice.getText());
            
            // If Price  is a negative number
            if (price < 0) 
            { 
                /* Set Bool    */ dataIsOk = false;
                /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: Price cannot be a negative number", "Error", JOptionPane.ERROR_MESSAGE); 
                
            } 
            else { service.setPrice(price); }
            
            /* CheckPay   */ boolean isPayed = chkServiceAddPayed.isSelected(); service.setCheckPay(isPayed); 
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool     */ dataIsOk = false;
            /* Console Log  */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User  */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
        // If correct data format
        if (dataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, service.displayAllVariablesFor_Service_Add(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {

                /* Do process */ try {  programController.service_Add(service); } catch (SQLException e) { System.out.println(e.getMessage()); }

                /* Reset text fields */
                /* FamilyId   */ txtServiceAddFamilyId.setText("");
                /* DeceasedId */ txtServiceAddDeceasedId.setText("");
                /* Comment    */ txtServiceAddComment.setText("");
                /* Date       */ dtpServiceAdd.setDate(new Date(System.currentTimeMillis())); // Reset to current date
                /* Price      */ txtServiceAddPrice.setText("");
                /* CheckPay   */ chkServiceAddPayed.setSelected(false);
                
                /* Refresh table */ selectAllService();

            }
            // If user Cancels
            else { /* Do nothing */ }  
        }
    }//GEN-LAST:event_btnServiceAddActionPerformed

    // Update
    private void btnServiceUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceUpdateActionPerformed
        
        /* Data format verification bool */ boolean dataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj        */ service = new Service(); 
            /* Id         */ int svId = Integer.parseInt(txtServiceUpdateId.getText()); service.setId(svId);
            /* FamilyId   */ int fmId = Integer.parseInt(txtServiceUpdateFamilyId.getText()); service.setFamilyID(fmId);
            /* DeceasedId */ int dcId = Integer.parseInt(txtServiceUpdateDeceasedId.getText()); service.setDeceasedID(dcId);
            /* Comment    */ service.setComment(txtServiceUpdateComment.getText());         
            /* Date       */ Date selectedDate = new Date(dtpServiceUpdate.getDate().getTime()); service.setDate(selectedDate); 
            /* Price      */ double price = Double.parseDouble(txtServiceUpdatePrice.getText()); service.setPrice(price);
            
            // If Price  is a negative number
            if (price < 0) 
            { 
                /* Set Bool    */ dataIsOk = false;
                /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: Price cannot be a negative number", "Error", JOptionPane.ERROR_MESSAGE); 
                
            } 
            else { service.setPrice(price); }
            
            /* CheckPay   */ boolean isPayed = chkServiceUpdatePayed.isSelected(); service.setCheckPay(isPayed); 
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ dataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (dataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, service.displayAllVariablesFor_Service_Update(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.service_Update(service); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Id         */ txtServiceUpdateId.setText("");
                /* FamilyId   */ txtServiceUpdateFamilyId.setText("");
                /* DeceasedId */ txtServiceUpdateDeceasedId.setText("");
                /* Comment    */ txtServiceUpdateComment.setText("");
                /* Date       */ dtpServiceUpdate.setDate(new Date(System.currentTimeMillis())); // Reset to current date
                /* Price      */ txtServiceUpdatePrice.setText("");
                /* CheckPay   */ chkServiceUpdatePayed.setSelected(false);
                
                /* Refresh table */ selectAllService();
            }
            // If user Cancels
            else { /* Do nothing */ }  
        }  
        
    }//GEN-LAST:event_btnServiceUpdateActionPerformed
    
    // Remove
    private void btnServiceRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceRemoveActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj */ service = new Service();
            /* Id  */ int Id = Integer.parseInt(txtServiceRemoveId.getText()); service.setId(Id);
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, "Id to Remove: " + service.getId(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.service_Remove(service); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */ txtServiceRemoveId.setText("");
                
                /* Refresh table */ selectAllService();
            }
            // If user cancels
            else { /* Do nothing */ }  
        }
        
    }//GEN-LAST:event_btnServiceRemoveActionPerformed

    // --------------------------
    
    ////////////////////
    //  Add Family    //
    ////////////////////
    
    // C R U D
    
    // Select
    private void selectAllFamily() 
    {
        /* Forward -> Pc    */ try {  programController.family_SelectAll(dgvFamily); } 
        /* Catch Errors/Log */ catch (SQLException e) { System.out.println(e.getMessage()); }
    }
    private void btnFamilyShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFamilyShowAllActionPerformed
        selectAllFamily();
    }//GEN-LAST:event_btnFamilyShowAllActionPerformed
    
    // Add
    private void btnFamilyAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFamilyAddActionPerformed
                
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj      */ family = new Family(); 
            /* Name     */ family.setName(txtFamilyAddName.getText());
            /* Contact  */ family.setContact(txtFamilyAddContact.getText());
            /* Address  */ family.setAddress(txtFamilyAddAddress.getText());
            /* Relation */ family.setRelation(txtFamilyAddRelation.getText());
            /* Photo    */ family.setPhoto("None"); 
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool     */ DataIsOk = false;
            /* Console Log  */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User  */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, family.displayAllVariablesFor_Family_Add(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try { programController.family_Add(family); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */
                /* Name     */ txtFamilyAddName.setText("");
                /* Contact  */ txtFamilyAddContact.setText("");
                /* Address  */ txtFamilyAddAddress.setText("");
                /* Relation */ txtFamilyAddRelation.setText("");
                /* Photo    */ // Not implemented
                
                /* Refresh table */ selectAllFamily();
                /* Refresh table */ selectAllSearch();
                /* Refresh table */ selectAllSearchFamily();
            }
            // If user Cancels
            else { /* Do nothing */ }              
        }
        
    }//GEN-LAST:event_btnFamilyAddActionPerformed

    // Update
    private void btnFamilyUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFamilyUpdateActionPerformed
           
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj      */ family = new Family(); 
            /* Id       */ int Id = Integer.parseInt(txtFamilyUpdateId.getText()); family.setId(Id);
            /* Name     */ family.setName(txtFamilyUpdateName.getText());
            /* Contact  */ family.setContact(txtFamilyUpdateContact.getText());
            /* Address  */ family.setAddress(txtFamilyUpdateAddress.getText());
            /* Relation */ family.setRelation(txtFamilyUpdateRelation.getText());
            /* Photo    */ family.setPhoto("None");
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data" + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, family.displayAllVariablesFor_Family_Update(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.family_Update(family); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */
                /* Id       */ txtFamilyUpdateId.setText("");
                /* Name     */ txtFamilyUpdateName.setText("");
                /* Contact  */ txtFamilyUpdateContact.setText("");
                /* Address  */ txtFamilyUpdateAddress.setText("");
                /* Relation */ txtFamilyUpdateRelation.setText("");
                /* Photo    */ // Not implemented
                
                /* Refresh table */ selectAllFamily();
            }
            // If user Cancels
            else { /* Do nothing */ }  
        }
    }//GEN-LAST:event_btnFamilyUpdateActionPerformed
    
    // Remove
    private void btnFamilyRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFamilyRemoveActionPerformed
    
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj */ family = new Family();
            /* Id  */ int Id = Integer.parseInt(txtFamilyRemoveId.getText()); family.setId(Id);
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
            /* Inform User */ JOptionPane.showMessageDialog(null, "Unexpected Error while collecting data\nError Details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE); 
        }
        // If correct data format
        if (DataIsOk) 
        {
            // Show confirmation dialog
            int choice = JOptionPane.showConfirmDialog(null, "Id to Remove: " + family.getId(), "Confirm Data", JOptionPane.YES_NO_OPTION);
            // If user proceeds
            if (choice == JOptionPane.YES_OPTION) 
            {
                /* Do process */ try {  programController.family_Remove(family); } catch (SQLException e) { System.out.println(e.getMessage()); }
                
                /* Reset text fields */ txtFamilyRemoveId.setText("");
                
                /* Refresh table */ selectAllFamily();
            }
            // If user cancels
            else { /* Do nothing */ }  
        }
        
    }//GEN-LAST:event_btnFamilyRemoveActionPerformed
    
    // --------------------------
    
    ////////////////
    //  Search    //
    ////////////////
    
    // --------------------------
    // For Family
    // --------------------------
    
    // By ID
    private void btnServiceFamilyFilterByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceFamilyFilterByIdActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj */ service = new Service();
            /* Id  */ int Id = Integer.parseInt(txtServiceFamilyFilterById.getText()); service.setId(Id);
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectFamilyById(service, dgvSearch); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
        
    }//GEN-LAST:event_btnServiceFamilyFilterByIdActionPerformed
    
    // By Table list (filter) (btn pressed)
    private void btnServiceFamilyFilterByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceFamilyFilterByNameActionPerformed
        
        /* Data format verification bool */ boolean DataIsOk = true;

        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj  */ family = new Family();
            /* Name */ family.setName(txtServiceFamilyFilterByName.getText());
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectFamilyByTableListFilter(family, dgvSearchFamily); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_btnServiceFamilyFilterByNameActionPerformed

    // By Table list (filter) (key pressed)
    private void txtServiceFamilyFilterByNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtServiceFamilyFilterByNameKeyPressed
       
        /* Data format verification bool */ boolean DataIsOk = true;

        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj  */ family = new Family();
            /* Name */ family.setName(txtServiceFamilyFilterByName.getText());
        } 
        // If wrong data format
        catch (Exception e) { /*Set Bool*/ DataIsOk = false; /*Console Log*/ System.out.println("Unexpected Error while collecting data " + e.getMessage()); }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ 
            try { programController.search_SelectFamilyByTableListFilter(family, dgvSearchFamily); } 
            catch (SQLException e) { System.out.println(e.getMessage()); }
            catch (Exception e)    { System.out.println(e.getMessage()); }
        }
        
    }//GEN-LAST:event_txtServiceFamilyFilterByNameKeyPressed
    
    // By clicking on table list
    private void dgvSearchFamilyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dgvSearchFamilyMouseClicked
        
        /* Data format verification bool */ boolean DataIsOk = true;
        /* Obj to capture data           */ service = new Service();
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Get the row index where the user clicked
            int rowIndex = dgvSearchFamily.getSelectedRow();
            if (rowIndex >= 0) 
            {
                /* Get value in Id column   */ int id = (int) dgvSearchFamily.getValueAt(rowIndex, 0);
                /* Get value in Name column */ String name = (String) dgvSearchFamily.getValueAt(rowIndex, 1);

                /* Set data into obj */ service.setId(id);
                /* Set data into obj */ service.setGenericText(name);
                
                /* Console Log */ System.out.println(service.getId() + " " + service.getGenericText());
            }
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectFamilyById(service, dgvSearch); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_dgvSearchFamilyMouseClicked

    // Fill Table list
    private void selectAllSearchFamily()
    {   
        /* Fill table */ try { programController.search_SelectAllFamilyNames(dgvSearchFamily); } catch (Exception e) { System.out.println("Error: " + e.getMessage()); }
    } 
      
    // --------------------------
    // For Deceased
    // --------------------------
    
    // By ID
    private void btnServiceDeceasedFilterByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceDeceasedFilterByIdActionPerformed
        /* Data format verification bool */ boolean DataIsOk = true;
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj */ service = new Service();
            /* Id  */ int Id = Integer.parseInt(txtServiceDeceasedFilterById.getText()); service.setId(Id);
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectDeceasedById(service, dgvSearch); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_btnServiceDeceasedFilterByIdActionPerformed
    
    // By Table list (filter) (btn pressed)
    private void btnServiceDeceasedFilterByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceDeceasedFilterByNameActionPerformed
        /* Data format verification bool */ boolean DataIsOk = true;

        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj  */ deceased = new Deceased();
            /* Name */ deceased.setName(txtServiceDeceasedFilterByName.getText());
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectDeceasedByTableListFilter(deceased, dgvSearchDeceased); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_btnServiceDeceasedFilterByNameActionPerformed
    
    // By Table list (filter) (key pressed)
    private void txtServiceDeceasedFilterByNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtServiceDeceasedFilterByNameKeyPressed
        /* Data format verification bool */ boolean DataIsOk = true;

        // Verify data (by collecting it into an obj)
        try 
        {
            // Capture data
            /* Obj  */ deceased = new Deceased();
            /* Name */ deceased.setName(txtServiceDeceasedFilterByName.getText());
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectDeceasedByTableListFilter(deceased, dgvSearchDeceased); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_txtServiceDeceasedFilterByNameKeyPressed
    
    // By clicking on table list
    private void dgvSearchDeceasedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dgvSearchDeceasedMouseClicked
        
        /* Data format verification bool */ boolean DataIsOk = true;
        /* Obj to capture data           */ service = new Service();
        
        // Verify data (by collecting it into an obj)
        try 
        {
            // Get the row index where the user clicked
            int rowIndex = dgvSearchDeceased.getSelectedRow();
            if (rowIndex >= 0) 
            {
                /* Get value in Id column   */ int id = (int) dgvSearchDeceased.getValueAt(rowIndex, 0);
                /* Get value in Name column */ String name = (String) dgvSearchDeceased.getValueAt(rowIndex, 1);

                /* Set data into obj */ service.setId(id);
                /* Set data into obj */ service.setGenericText(name);
                
                /* Console Log */ System.out.println(service.getId() + " " + service.getGenericText());
            }
        } 
        // If wrong data format
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_SelectDeceasedById(service, dgvSearch); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_dgvSearchDeceasedMouseClicked

    // Fill Table list
    private void selectAllSearchDeceased()
    {   
        /* Fill table */ try { programController.search_SelectAllDeceasedNames(dgvSearchDeceased); } catch (Exception e) { System.out.println("Error: " + e.getMessage()); }
    } 
    
    // --------------------------
    // For Services
    // --------------------------
    
    // Select
    private void selectAllSearch()
    {
        /* Forward -> Pc    */ try {  programController.search_SelectAll(dgvSearch); } 
        /* Catch Errors/Log */ catch (SQLException e) { System.out.println(e.getMessage()); }
    }
    
    // Filter
    private void btnServiceServiceFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceServiceFilterActionPerformed
        /* Data format verification bool */ boolean DataIsOk = true;
        
        /* Obj */ service = new Service();
        
        // Verify data (by collecting it into an obj)
        try 
        {         
            // --------------------------
            // See if checkboxs are selected
            // --------------------------
            
            // Id
            if (chkServiceIdFilter.isSelected()) 
            {   
                // Using the object to make sure it's the correct variable type
                int Id = Integer.parseInt(txtServiceServiceFilterByID.getText()); 
                // Convert to String
                String strId = String.valueOf(Id);
                service.setGenericText(strId);  
            } 
            /* No Id checkbox */ else { service.setGenericText("%"); }
            
            // Date
            if (chkServiceDateFilter.isSelected() ) 
            { 
                // Using the object to make sure it's the correct variable type
                Date selectedDate = new Date(dtpServiceDateFilter.getDate().getTime());
                service.setDate(selectedDate);
                // Convert to String
                String strDate = String.valueOf(selectedDate);
                service.setGenericText2(strDate);
            } 
            /* No Date checkbox */ else { service.setGenericText2("%-%-%"); };
            
            // CheckPay
            if (chkServicePayedFilter.isSelected()) { 
                /* Check Yes Pay        */ if (rdServicePayYes.isSelected()) { service.setGenericText3("1"); } 
                /* Check No Pay         */ else { service.setGenericText3("0");} 
            }   /* No CheckPay checkbox */ else { service.setGenericText3("%"); }
            
            /* Console Log */ System.out.println
            (
                    "------------------------\n"
                  + "Search by Filter Button:\n"
                  + "<!> Non-selected Checkboxes return a SQL wildcard. Like so '%'\n"
                  + "CHECKBOX STATUS\n"
                  + "   Id: " + chkServiceIdFilter.isSelected() + "   Date: " + chkServiceDateFilter.isSelected() + "   Pay: " + chkServicePayedFilter.isSelected() + "\n"
                  + "VALUES\n"
                  + "   Id: " + service.getGenericText() + "   Date: " + service.getGenericText2() + "   Pay: " + service.getGenericText3() + "\n"
                  + "------------------------"
            );
        } 
        // If wrong data format
        catch (NullPointerException e)
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Null Pointer Exception " + e.getMessage());
        }
        catch (Exception e) 
        { 
            /* Set Bool    */ DataIsOk = false;
            /* Console Log */ System.out.println("Unexpected Error while collecting data " + e.getMessage());
        }
        // If correct data format
        if (DataIsOk) 
        {
            /* Do process */ try {  programController.search_Filter(service, dgvSearch); } catch (SQLException e) { System.out.println(e.getMessage()); }
        }
    }//GEN-LAST:event_btnServiceServiceFilterActionPerformed
    
    // RADIAL BUTTON (Payed) Yes
    private void rdServicePayYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdServicePayYesActionPerformed
        rdServicePayYes.setSelected(true);
        rdServicePayNo.setSelected(false);
    }//GEN-LAST:event_rdServicePayYesActionPerformed
    
    // RADIAL BUTTON (Payed) No  
    private void rdServicePayNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdServicePayNoActionPerformed
        rdServicePayNo.setSelected(true);
        rdServicePayYes.setSelected(false);
    }//GEN-LAST:event_rdServicePayNoActionPerformed

    // Show All
    private void btnServiceServiceShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceServiceShowAllActionPerformed
        selectAllSearch();
    }//GEN-LAST:event_btnServiceServiceShowAllActionPerformed

    // --------------------------
    
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // Main "Run Application"
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
   
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try 
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) 
            {
                if ("Nimbus".equals(info.getName())) 
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } 
        catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } 
        catch (InstantiationException ex) { java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } 
        catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } 
        catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                try { new MainForm().setVisible(true); } catch (SQLException e) { System.out.println(e.getMessage()); }
            }
        });
    }

    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // GUI
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Address;
    private javax.swing.JLabel Address1;
    private javax.swing.JButton btnDeceaseRemove;
    private javax.swing.JButton btnDeceasedAdd;
    private javax.swing.JButton btnDeceasedShowAll;
    private javax.swing.JButton btnDeceasedUpdate;
    private javax.swing.JButton btnFamilyAdd;
    private javax.swing.JButton btnFamilyRemove;
    private javax.swing.JButton btnFamilyShowAll;
    private javax.swing.JButton btnFamilyUpdate;
    private javax.swing.JButton btnServiceAdd;
    private javax.swing.JButton btnServiceDeceasedFilterById;
    private javax.swing.JButton btnServiceDeceasedFilterByName;
    private javax.swing.JButton btnServiceFamilyFilterById;
    private javax.swing.JButton btnServiceFamilyFilterByName;
    private javax.swing.JButton btnServiceRemove;
    private javax.swing.JButton btnServiceServiceFilter;
    private javax.swing.JButton btnServiceServiceShowAll;
    private javax.swing.JButton btnServiceShowAll;
    private javax.swing.JButton btnServiceUpdate;
    private javax.swing.JCheckBox chkServiceAddPayed;
    private javax.swing.JCheckBox chkServiceDateFilter;
    private javax.swing.JCheckBox chkServiceIdFilter;
    private javax.swing.JCheckBox chkServicePayedFilter;
    private javax.swing.JCheckBox chkServiceUpdatePayed;
    private javax.swing.JTable dgvDeceased;
    private javax.swing.JTable dgvFamily;
    private javax.swing.JTable dgvSearch;
    private javax.swing.JTable dgvSearchDeceased;
    private javax.swing.JTable dgvSearchFamily;
    private javax.swing.JTable dgvService;
    private com.toedter.calendar.JDateChooser dtpServiceAdd;
    private com.toedter.calendar.JDateChooser dtpServiceDateFilter;
    private com.toedter.calendar.JDateChooser dtpServiceUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuItem menu_AboutSaf;
    private javax.swing.JMenuItem menu_Exit;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JRadioButton rdDeceasedAddSexF;
    private javax.swing.JRadioButton rdDeceasedAddSexM;
    private javax.swing.JRadioButton rdDeceasedUpdateSexF;
    private javax.swing.JRadioButton rdDeceasedUpdateSexM;
    private javax.swing.JRadioButton rdServicePayNo;
    private javax.swing.JRadioButton rdServicePayYes;
    private javax.swing.JTextField txtDeceasedAddAge;
    private javax.swing.JTextField txtDeceasedAddComment;
    private javax.swing.JTextField txtDeceasedAddName;
    private javax.swing.JTextField txtDeceasedRemoveId;
    private javax.swing.JTextField txtDeceasedUpdateAge;
    private javax.swing.JTextField txtDeceasedUpdateComment;
    private javax.swing.JTextField txtDeceasedUpdateId;
    private javax.swing.JTextField txtDeceasedUpdateName;
    private javax.swing.JTextField txtFamilyAddAddress;
    private javax.swing.JTextField txtFamilyAddContact;
    private javax.swing.JTextField txtFamilyAddName;
    private javax.swing.JTextField txtFamilyAddRelation;
    private javax.swing.JTextField txtFamilyRemoveId;
    private javax.swing.JTextField txtFamilyUpdateAddress;
    private javax.swing.JTextField txtFamilyUpdateContact;
    private javax.swing.JTextField txtFamilyUpdateId;
    private javax.swing.JTextField txtFamilyUpdateName;
    private javax.swing.JTextField txtFamilyUpdateRelation;
    private javax.swing.JTextField txtServiceAddComment;
    private javax.swing.JTextField txtServiceAddDeceasedId;
    private javax.swing.JTextField txtServiceAddFamilyId;
    private javax.swing.JTextField txtServiceAddPrice;
    private javax.swing.JTextField txtServiceDeceasedFilterById;
    private javax.swing.JTextField txtServiceDeceasedFilterByName;
    private javax.swing.JTextField txtServiceFamilyFilterById;
    private javax.swing.JTextField txtServiceFamilyFilterByName;
    private javax.swing.JTextField txtServiceRemoveId;
    private javax.swing.JTextField txtServiceServiceFilterByID;
    private javax.swing.JTextField txtServiceUpdateComment;
    private javax.swing.JTextField txtServiceUpdateDeceasedId;
    private javax.swing.JTextField txtServiceUpdateFamilyId;
    private javax.swing.JTextField txtServiceUpdateId;
    private javax.swing.JTextField txtServiceUpdatePrice;
    // End of variables declaration//GEN-END:variables
}
